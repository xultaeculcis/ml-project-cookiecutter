[metadata]
name = "ml-project-cookiecutter"
author = "xultaeculcis"
url = "https://github.com/xultaeculcis/ml-project-cookiecutter"

[tool.ruff]
show-fixes = true
target-version = "py38"
line-length = 120
extend-exclude = [
    "docs/*",
    "[{][{] cookiecutter.repo_name [}][}]/*",
]

[tool.ruff.lint]
select = [
    "D", # see: https://pypi.org/project/pydocstyle
    "F", # see: https://pypi.org/project/Pyflakes
    "E", "W", # see: https://pypi.org/project/pycodestyle
    "C90", # see: https://pypi.org/project/mccabe
    "I", # see: https://pypi.org/project/isort
    "N", # see: https://pypi.org/project/pep8-naming
    "UP", # see: https://pypi.org/project/pyupgrade
    "YTT", # see: https://pypi.org/project/flake8-2020
    "ANN", # see: https://pypi.org/project/flake8-annotations
    "ASYNC", # see: https://pypi.org/project/flake8-async
    "TRIO", # see: https://pypi.org/project/flake8-trio
    "S", # see: https://pypi.org/project/flake8-bandit
    "BLE", # see: https://pypi.org/project/flake8-blind-except
    "FBT", # see: https://pypi.org/project/flake8-boolean-trap
    "B", # see: https://pypi.org/project/flake8-bugbear
    "A", # see: https://pypi.org/project/flake8-builtins
    "C4", # see: https://pypi.org/project/flake8-comprehensions
    "DTZ", # see: https://pypi.org/project/flake8-datetimez
    "T10", # see: https://pypi.org/project/flake8-debugger
    "EM", # see: https://pypi.org/project/flake8-errmsg
    "EXE", # see: https://pypi.org/project/flake8-executable
    "FA", # see: https://pypi.org/project/flake8-future-annotations
    "ICN", # see: https://pypi.org/project/flake8-import-conventions
    "G", # see: https://pypi.org/project/flake8-logging-format
    "INP", # see: https://pypi.org/project/flake8-no-pep420
    "PIE", # see: https://pypi.org/project/flake8-pie
    "T20", # see: https://pypi.org/project/flake8-print
    "PYI", # see: https://pypi.org/project/flake8-pyi
    "PT", # see: https://pypi.org/project/flake8-pytest-style
    "Q", # see: https://pypi.org/project/flake8-quotes
    "RSE", # see: https://pypi.org/project/flake8-raise
    "RET", # see: https://pypi.org/project/flake8-return
    "SLF", # see: https://pypi.org/project/flake8-self
    "SLOT", # see: https://pypi.org/project/flake8-slots
    "SIM", # see: https://pypi.org/project/flake8-simplify
    "TID", # see: https://pypi.org/project/flake8-tidy-imports
    "TCH", # see: https://pypi.org/project/flake8-type-checking
    "INT", # see: https://pypi.org/project/flake8-gettext
    "ARG", # see: https://pypi.org/project/flake8-unused-arguments
    "PTH", # see: https://pypi.org/project/flake8-use-pathlib
    "ERA", # see: https://pypi.org/project/eradicate
    "PD", # see: https://pypi.org/project/pandas-vet
    "PGH", # see: https://pypi.org/project/pygrep-hooks
    "PL", # see: https://pypi.org/project/Pylint
    "TRY", # see: https://pypi.org/project/tryceratops
    "FLY", # see: https://pypi.org/project/flynt
    "NPY", # see: https://pypi.org/project/NumPy-specific rules
    "AIR", # see: https://pypi.org/project/Airflow
    "PERF", # see: https://pypi.org/project/Perflint
    "FURB", # see: https://pypi.org/project/refurb
    "LOG", # see: https://pypi.org/project/flake8-logging
    "RUF", # Ruff-specific rules
]
ignore = [
    "D1",  # see: https://pypi.org/project/pydocstyle - D1 - undocumented public member - too restrictive
    "COM", # see: https://pypi.org/project/flake8-commas - conflicts with formatter
    "ISC", # see: https://pypi.org/project/flake8-implicit-str-concat - conflicts with formatter
    "CPY", # see: https://pypi.org/project/flake8-copyright - not used
    "DJ", # see: https://pypi.org/project/flake8-django - not used
    "TD", # see: https://pypi.org/project/flake8-todos - too restrictive
    "FIX", # see: https://pypi.org/project/flake8-fixme - too restrictive
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = ["S101"]  # Allow "use of assert detected" in tests

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = "--ignore docs"
asyncio_mode = "auto"
filterwarnings = [
    "ignore::UserWarning",
]

[tool.mypy]
exclude = [
    'venv',
    '\.venv',
    '\.git',
    '__pycache__',
    'configs',
    'data',
    'logs',
    'outputs',
    'models',
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_configs = true
plugins = "numpy.typing.mypy_plugin"

[[tool.mypy.overrides]]
module = [
    "cookiecutter.*",
    "mkdocs_gen_files.*",
]
ignore_missing_imports = true
ignore_errors = true

[tool.interrogate]
ignore-init-module = true
ignore_init_method = true
exclude = ["tests", "docs", "docs-site"]
omit-covered-files = true

[tool.docformatter]
recursive = true
wrap-summaries = 120
wrap-descriptions = 120
blank = true
